Введение

Драйвера V4L2 имеют тенденцию быть очень комплексными из-за сложности железа:
большинство устройств имеют множественные ICs, экспортируют множественные
узлы устройств в /dev и создают также  не V4L2 устройства такие как DVB, ALSA
FB, I2C и входные (IR) устройства.

Особенно факт того, что V4L2 драйверы устанавливают поддержку IC чтобы делать
аудио/видео шифровку/дешифровку делают их более комплексными, чем остальные. Обычно
IC присоединены к главному мостовому драйверу через одну или более I2C шину,
но другие шины могут быть так же использованы. Такие устройства называются 
подустройства(sub-devices).

Долгое время фреймворк был ограничен структурой video_device для создания узла
устройства V4L2 и video_buf для управления видео буферами. Этот документ не 
рассматривает video_buf  фреймворк.

Это означет что все драйверы должны были сами настраивать экземпляры устройстви 
и присоединяться к подустройствам. екоторое из этого сложно делать и многие 
драйверы никогда не делали это правильно.

Даже есть много общего кода, который невозможно было бы рефакторить из-за
отсутствия фреймворка. Так этот фреймворк устанавливает базовые строительные блоки
нужные для всех драйверов и он же должен упростить рефакторинг общего кода 
благодоря полезным функциям распространенным среди всех драйверов.

В качестве примера v4l2-pci-skeleton.c который доступен в samples/v4l2/. Это скелет 
драйвера для захватывающего карту PCI драйвера и демонстрирующего как использовать  
v4L2 driver фреймворк. Он может быть использован как шаблон для реального видео 
захватывающего драйвера PCI. 